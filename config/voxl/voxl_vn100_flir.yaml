%YAML:1.0

#common parameters
imu_topic: "/vectornav/IMU_modified_time"
image_topic: "/uvc/image_raw"
output_path: "/home/jagatpreet/datasets/voxl_logs/vio_results/"

#camera calibration 

model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 512
distortion_parameters:
   k1: -0.4368
   k2: 0.1914
   p1: -0.0027
   p2: -0.0011
projection_parameters:
   fx: 508.2736
   fy: 508.2341
   cx: 319.7219
   cy: 268.1211

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0, 0,  1, 
            1, 1,  0,   
            0,  0,  0] 
           
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.07095216,0.00260041, -0.03047335] # vectornav-vn100 - setup 4 - vn100 near the CG of drone on the modem
   #data: [0.017,-0.015, 0.013] # imu 1
   #data:[.165,-0.005,-0.026] (vn100 measured)
#feature tracker paprameters
max_cnt: 300            # max feature number in feature tracking
min_dist: 20           # min distance between two features in pixels
freq: 0                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0            # if image is too dark or light, trun on equalize to find enough features
fisheye: 0             # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # 10 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.078576         # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.028064    # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00010153         # accelerometer bias random work noise standard deviation.  #3.00e-3
gyr_w: 0.00000396       # gyroscope bias random work noise standard deviation.     #1.93e-5
g_norm: 9.8099     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/jagatpreet/datasets/voxl_logs/vio_results" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.105779198723                 # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
